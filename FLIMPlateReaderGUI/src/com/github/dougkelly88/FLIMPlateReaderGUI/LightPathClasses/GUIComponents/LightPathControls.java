/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.github.dougkelly88.FLIMPlateReaderGUI.LightPathClasses.GUIComponents;

import com.github.dougkelly88.FLIMPlateReaderGUI.GeneralClasses.SeqAcqProps;
import com.github.dougkelly88.FLIMPlateReaderGUI.GeneralClasses.VariableTest;
import com.google.common.eventbus.Subscribe;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import mmcorej.CMMCore;
import mmcorej.StrVector;
import org.micromanager.MMStudio;
import org.micromanager.acquisition.AcquisitionEngine;
import org.micromanager.api.ScriptInterface;
import org.micromanager.api.events.PropertyChangedEvent;



/**
 *
 * @author dk1109
 */
public class LightPathControls extends javax.swing.JPanel {
    MMStudio gui_;
    CMMCore core_;
    PropertyChangedEvent event_;
    private SeqAcqProps sap_;
    private VariableTest var_;
    Object parent_;
//    private SequencedAcquisitionProperties sap_;
    
    /**
     * Creates new form FLIMControls
     */
    public LightPathControls() {
        initComponents();
        gui_ = MMStudio.getInstance();
        sap_ = SeqAcqProps.getInstance();
        var_ = VariableTest.getInstance();
        try{
        gui_.registerForEvents(this);
        core_ = gui_.getCore();
        }
        catch (Exception e) 
        {
            //gui_.showMessage("Error in FLIMPanel constructor: " + e.getMessage());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        General = new javax.swing.JPanel();
        LaserON = new javax.swing.JToggleButton();
        Filters = new javax.swing.JPanel();
        NDFWComboBox = new javax.swing.JComboBox();
        ExcitationComboBox = new javax.swing.JComboBox();
        DichroicComboBox = new javax.swing.JComboBox();
        EmissionComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Olympus = new javax.swing.JPanel();
        ObjectiveComboBox = new javax.swing.JComboBox();
        FilterCubeComboBox = new javax.swing.JComboBox();
        SwitchPortComboBox = new javax.swing.JComboBox();
        ObjectiveLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        General.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "General"));

        LaserON.setText("Laser ON");
        LaserON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaserONActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GeneralLayout = new javax.swing.GroupLayout(General);
        General.setLayout(GeneralLayout);
        GeneralLayout.setHorizontalGroup(
            GeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GeneralLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(LaserON, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(441, Short.MAX_VALUE))
        );
        GeneralLayout.setVerticalGroup(
            GeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LaserON, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        Filters.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Filters"));

        NDFWComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        NDFWComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NDFWComboBoxActionPerformed(evt);
            }
        });

        ExcitationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ExcitationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcitationComboBoxActionPerformed(evt);
            }
        });

        DichroicComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        DichroicComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DichroicComboBoxActionPerformed(evt);
            }
        });

        EmissionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        EmissionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmissionComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Intensity");

        jLabel2.setText("Excitation");

        jLabel3.setText("Dichroic");

        jLabel4.setText("Emission");

        javax.swing.GroupLayout FiltersLayout = new javax.swing.GroupLayout(Filters);
        Filters.setLayout(FiltersLayout);
        FiltersLayout.setHorizontalGroup(
            FiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FiltersLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(FiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(NDFWComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(FiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExcitationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(FiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DichroicComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(FiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(EmissionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(122, Short.MAX_VALUE))
        );

        FiltersLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {DichroicComboBox, EmissionComboBox, ExcitationComboBox, NDFWComboBox});

        FiltersLayout.setVerticalGroup(
            FiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FiltersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(FiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NDFWComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ExcitationComboBox)
                    .addComponent(DichroicComboBox)
                    .addComponent(EmissionComboBox))
                .addContainerGap())
        );

        Olympus.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Olympus"));

        ObjectiveComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ObjectiveComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ObjectiveComboBoxActionPerformed(evt);
            }
        });

        FilterCubeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        FilterCubeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterCubeComboBoxActionPerformed(evt);
            }
        });

        SwitchPortComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        SwitchPortComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SwitchPortComboBoxActionPerformed(evt);
            }
        });

        ObjectiveLabel.setText("Objective");

        jLabel6.setText("Filter Cube");

        jLabel7.setText("BeamPath");

        javax.swing.GroupLayout OlympusLayout = new javax.swing.GroupLayout(Olympus);
        Olympus.setLayout(OlympusLayout);
        OlympusLayout.setHorizontalGroup(
            OlympusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OlympusLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(OlympusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ObjectiveComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ObjectiveLabel))
                .addGap(18, 18, 18)
                .addGroup(OlympusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FilterCubeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(OlympusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(SwitchPortComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(215, 215, 215))
        );
        OlympusLayout.setVerticalGroup(
            OlympusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OlympusLayout.createSequentialGroup()
                .addGroup(OlympusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ObjectiveLabel)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OlympusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ObjectiveComboBox)
                    .addComponent(FilterCubeComboBox)
                    .addComponent(SwitchPortComboBox)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Olympus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(General, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Filters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(General, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Filters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Olympus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void LaserONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaserONActionPerformed

            if (LaserON.isSelected()){
                LaserON.setText("Laser ON");
                try {
                    core_.setProperty("FianiumSC","LaserOn?", "Off");
                } catch (Exception ex) {
                    Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            } else {
                LaserON.setText("Laser OFF");
                try {
                    core_.setProperty("FianiumSC","LaserOn?", "On");
                } catch (Exception ex) {
                    Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
           // TODO add your handling code here:
    }//GEN-LAST:event_LaserONActionPerformed

    private void DichroicComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DichroicComboBoxActionPerformed
        // Set/get combo box item
        int DichState= DichroicComboBox.getSelectedIndex(); 
        try {
            core_.setProperty("CSUX-Dichroic Mirror", "State", DichState);
        } catch (Exception ex) {
            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
        }  
        // overwrite variable
        var_.DichroicComboBoxSelectedItem=(String)DichroicComboBox.getSelectedItem();

    }//GEN-LAST:event_DichroicComboBoxActionPerformed

    private void NDFWComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NDFWComboBoxActionPerformed
        // description see Dichroic as example
        int NDFWState= NDFWComboBox.getSelectedIndex();
        try {
            core_.setProperty("NDFW", "State", NDFWState);
        } catch (Exception ex) {
            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
        }
        var_.NDFWComboBoxSelectedItem=(String)NDFWComboBox.getSelectedItem();
        // TODO add your handling code here:
    }//GEN-LAST:event_NDFWComboBoxActionPerformed

    private void ExcitationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcitationComboBoxActionPerformed
        // description see Dichroic as example
        int ExciState= ExcitationComboBox.getSelectedIndex();
        try {
            core_.setProperty("SpectralFW", "State", ExciState);
        } catch (Exception ex) {
            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
        }
        var_.ExcitationComboBoxSelectedItem=(String)ExcitationComboBox.getSelectedItem();
        // TODO add your handling code here:
    }//GEN-LAST:event_ExcitationComboBoxActionPerformed

    private void EmissionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmissionComboBoxActionPerformed
     // description see Dichroic as example
        int EmisState= EmissionComboBox.getSelectedIndex();
        try {
            core_.setProperty("CSUX-Filter Wheel", "State", EmisState);
        } catch (Exception ex) {
            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
        }
        var_.EmissionComboBoxSelectedItem=(String)EmissionComboBox.getSelectedItem();
    }//GEN-LAST:event_EmissionComboBoxActionPerformed

    private void setByLabel(JComboBox combo, String device){
        try{
            String setval = (String) combo.getSelectedItem();
            core_.setProperty(device, "Label", setval);
            // TODO: implement updating of var_...
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
        
    }
    
    private void ObjectiveComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ObjectiveComboBoxActionPerformed
        setByLabel(ObjectiveComboBox, "Objective");
        
//        int ObjeState= ObjectiveComboBox.getSelectedIndex();
//        
//        try {
//            StrVector vals = core_.getAllowedPropertyValues("Objective", "Label");
//            
//            String setval = (String) ObjectiveComboBox.getSelectedItem();
//            core_.setProperty("Objective", "State", ObjeState);
//        } catch (Exception ex) {
//            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        var_.ObjectiveComboBoxSelectedItem=(String)ObjectiveComboBox.getSelectedItem();
//        // TODO add your handling code here:
    }//GEN-LAST:event_ObjectiveComboBoxActionPerformed

    private void FilterCubeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterCubeComboBoxActionPerformed
    // description see Dichroic as example
        int CubeState= FilterCubeComboBox.getSelectedIndex();
        try {
            core_.setProperty("FilterCube", "State", CubeState);
        } catch (Exception ex) {
            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
        }
        var_.FilterCubeComboBoxSelectedItem=(String)FilterCubeComboBox.getSelectedItem();
        // TODO add your handling code here:
    }//GEN-LAST:event_FilterCubeComboBoxActionPerformed

    private void SwitchPortComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SwitchPortComboBoxActionPerformed
    // description see Dichroic as example
        int SwPoState= SwitchPortComboBox.getSelectedIndex();
        try {
            core_.setProperty("LightPathPrism", "State", SwPoState);
        } catch (Exception ex) {
            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
        } 
        var_.SwitchPortComboBoxSelectedItem=(String)SwitchPortComboBox.getSelectedItem();
        // TODO add your handling code here:
    }//GEN-LAST:event_SwitchPortComboBoxActionPerformed

    
    public void setLoadedSoftwareValues(){
        // searching label of prperty in SoftwareConfig and set values in LightPathControls
        DichroicComboBox.setSelectedItem(var_.findLabelOfProperty("Dichroic"));
        EmissionComboBox.setSelectedItem(var_.findLabelOfProperty("Emission"));
        NDFWComboBox.setSelectedItem(var_.findLabelOfProperty("Neutral Density Filter"));
        ExcitationComboBox.setSelectedItem(var_.findLabelOfProperty("Excitation"));
        ObjectiveComboBox.setSelectedItem(var_.findLabelOfProperty("Objective"));
        FilterCubeComboBox.setSelectedItem(var_.findLabelOfProperty("Filter Cube"));
        SwitchPortComboBox.setSelectedItem(var_.findLabelOfProperty("Light Path Prism"));
    }
    
    public void setLoadedHardwareValues(){
        //Intensity (NDFW) Load
        populateComboBoxes(NDFWComboBox, "NDFW");
        // Read allowed values for Label
//        StrVector NDFWBox = new StrVector();
//        try {
//            NDFWBox = core_.getAllowedPropertyValues("NDFW", "Label");
//        } catch (Exception ex) {
//            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        //Write Dichroic Label ComboBox
//        NDFWComboBox.removeAllItems();
//        for(String str : NDFWBox) {
//        NDFWComboBox.addItem(str);
//        }
        
        //Excitation (SpectralFW) Load
        populateComboBoxes(ExcitationComboBox, "SpectralFW");
        // Read allowed values for Label
//        StrVector ExciBox = new StrVector();
//        try {
//            ExciBox = core_.getAllowedPropertyValues("SpectralFW", "Label");
//        } catch (Exception ex) {
//            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        //Write Dichroic Label ComboBox
//        ExcitationComboBox.removeAllItems();
//        for(String str : ExciBox) {
//        ExcitationComboBox.addItem(str);
//        }
        
        //Dichroic Load
        populateComboBoxes(DichroicComboBox, "CSUX-Dichroic Mirror");
        // Read allowed values for Label
//        StrVector DichBox = new StrVector();
//        try {
//            DichBox = core_.getAllowedPropertyValues("CSUX-Dichroic Mirror", "Label");
//        } catch (Exception ex) {
//            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        //Write Dichroic Label ComboBox
//        DichroicComboBox.removeAllItems();
//        for(String str : DichBox) {
//        DichroicComboBox.addItem(str);
//        }      
        
        //Emission Load
        populateComboBoxes(EmissionComboBox, "CSUX-Filter Wheel");
        // Read allowed values for Label
//        StrVector EmisBox = new StrVector();
//        try {
//            EmisBox = core_.getAllowedPropertyValues("CSUX-Filter Wheel", "Label");
//        } catch (Exception ex) {
//            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        //Write Dichroic Label ComboBox
//        EmissionComboBox.removeAllItems();
//        for(String str : EmisBox) {
//        EmissionComboBox.addItem(str);
//        }    
        
        //FilterCube Load
        populateComboBoxes(FilterCubeComboBox, "FilterCube");
        // Read allowed values for Label
//        StrVector CubeBox = new StrVector();
//        try {
//            CubeBox = core_.getAllowedPropertyValues("FilterCube", "Label");
//        } catch (Exception ex) {
//            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        //Write Dichroic Label ComboBox
//        FilterCubeComboBox.removeAllItems();
//        for(String str : CubeBox) {
//        FilterCubeComboBox.addItem(str);
//        }
        
        //Objective Load
        populateComboBoxes(ObjectiveComboBox, "Objective");
        // Read allowed values for Label
//        StrVector ObjeBox = new StrVector();
//        try {
//            ObjeBox = core_.getAllowedPropertyValues("Objective", "Label");
//        } catch (Exception ex) {
//            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        //Write Dichroic Label ComboBox
//        ObjectiveComboBox.removeAllItems();
//        for(String str : ObjeBox) {
//        ObjectiveComboBox.addItem(str);
//        }  
        
        //SwitchPort Load
        populateComboBoxes(SwitchPortComboBox, "LigthPathPrism");
        // Read allowed values for Label
//        StrVector SwPoBox = new StrVector();
//        try {
//            SwPoBox = core_.getAllowedPropertyValues("LightPathPrism", "Label");
//        } catch (Exception ex) {
//            Logger.getLogger(LightPathControls.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        //Write Dichroic Label ComboBox
//        SwitchPortComboBox.removeAllItems();
//        for(String str : SwPoBox) {
//        SwitchPortComboBox.addItem(str);
//        }        
    }
    
    private void populateComboBoxes(JComboBox combo, String device){
        StrVector vals = new StrVector();
        try {
            vals = core_.getAllowedPropertyValues(device, "Label");
            combo.removeAllItems();
            for (String str : vals){
                combo.addItem(str);
            }
        } catch (Exception e){
            System.out.println(e.getMessage());
        }
    }
    
    public void setParent(Object o){
        parent_ = o;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox DichroicComboBox;
    private javax.swing.JComboBox EmissionComboBox;
    private javax.swing.JComboBox ExcitationComboBox;
    private javax.swing.JComboBox FilterCubeComboBox;
    private javax.swing.JPanel Filters;
    private javax.swing.JPanel General;
    private javax.swing.JToggleButton LaserON;
    private javax.swing.JComboBox NDFWComboBox;
    private javax.swing.JComboBox ObjectiveComboBox;
    private javax.swing.JLabel ObjectiveLabel;
    private javax.swing.JPanel Olympus;
    private javax.swing.JComboBox SwitchPortComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
